/*
2 + 3 * 4;
//false && 100;
~false;
~5 + 4 + 2;
~(5+~5+1);

let a = 100;

let add = fn(x,y){return x + y + a;};

add(1,2);

let fac = fn(n){ if (n == 1){ return 1;} else { return n * fac(n-1);}};

fac(5);

let list = [1,2,3,4,5];


let a = [1,2,3];
let b = [4,5,6,fn(x,y){return x + y;}];
let c = a + b;

d[1];
c[100];
c[1];
c[6];

let a = fn(x){return fn(y){x + y;};};

let b = a(100);

c[2] + 100;

//函数调用的嵌套问题
// a(100)(10);
b(10);

//列表嵌套问题
//a[100][1](100);

b(2);

let d = c[6];

d(100,200);

//测试字符串拼接运算
let a = "abc";
let b = "def";

a + b;


let a = {"x" : 100, "b" : 200, "c" : {"d" : 111, "e" : 112}};

a["x"];

a["e"];

let tmp = a["c"];

tmp["d"];

let maxArr = fn(arr){}
*/

let a = fn(x){  let y=2; return fn(y){return fn(z){return x /*此时x=1*/ + y * z;};};};


a(2)(3)(4);

a(2)(3)(4);

/*
fn(x,y){return x + y;}(2,4);

let adderFactory = fn(x){ return fn(y){ return x + y;};};
let addTwo = adderFactory(2);
x;
addTwo(3);
*/


let exeTwice = fn(f, x){ return f(f(x));};
let addTwo = fn(x) { return x + 2;};
let mulThree = fn(x) { return x * 3;};

exeTwice(addTwo,3); // -> 7
exeTwice;
exeTwice(mulThree,12); // -> 108

let a = fn(f,x){return f(x);};

let f = fn(x){ return fn(y){ return fn(z){return x + y + z;};};};

a(f,2)(3)(8);


